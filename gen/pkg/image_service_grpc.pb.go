// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: image_service.proto

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageServiceClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	LoadImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*Empty, error)
	GetImages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Images, error)
	GetImagesStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ImageService_GetImagesStreamClient, error)
	LoadImageStream(ctx context.Context, opts ...grpc.CallOption) (ImageService_LoadImageStreamClient, error)
	GetImagesInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ImagesInfo, error)
}

type imageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceClient(cc grpc.ClientConnInterface) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/tgf.ImageService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) LoadImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/tgf.ImageService/LoadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) GetImages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Images, error) {
	out := new(Images)
	err := c.cc.Invoke(ctx, "/tgf.ImageService/GetImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) GetImagesStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ImageService_GetImagesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageService_ServiceDesc.Streams[0], "/tgf.ImageService/GetImagesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageServiceGetImagesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImageService_GetImagesStreamClient interface {
	Recv() (*Images, error)
	grpc.ClientStream
}

type imageServiceGetImagesStreamClient struct {
	grpc.ClientStream
}

func (x *imageServiceGetImagesStreamClient) Recv() (*Images, error) {
	m := new(Images)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageServiceClient) LoadImageStream(ctx context.Context, opts ...grpc.CallOption) (ImageService_LoadImageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageService_ServiceDesc.Streams[1], "/tgf.ImageService/LoadImageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageServiceLoadImageStreamClient{stream}
	return x, nil
}

type ImageService_LoadImageStreamClient interface {
	Send(*ImageRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type imageServiceLoadImageStreamClient struct {
	grpc.ClientStream
}

func (x *imageServiceLoadImageStreamClient) Send(m *ImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageServiceLoadImageStreamClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageServiceClient) GetImagesInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ImagesInfo, error) {
	out := new(ImagesInfo)
	err := c.cc.Invoke(ctx, "/tgf.ImageService/GetImagesInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServiceServer is the server API for ImageService service.
// All implementations should embed UnimplementedImageServiceServer
// for forward compatibility
type ImageServiceServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	LoadImage(context.Context, *ImageRequest) (*Empty, error)
	GetImages(context.Context, *Empty) (*Images, error)
	GetImagesStream(*Empty, ImageService_GetImagesStreamServer) error
	LoadImageStream(ImageService_LoadImageStreamServer) error
	GetImagesInfo(context.Context, *Empty) (*ImagesInfo, error)
}

// UnimplementedImageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedImageServiceServer struct {
}

func (UnimplementedImageServiceServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedImageServiceServer) LoadImage(context.Context, *ImageRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadImage not implemented")
}
func (UnimplementedImageServiceServer) GetImages(context.Context, *Empty) (*Images, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImages not implemented")
}
func (UnimplementedImageServiceServer) GetImagesStream(*Empty, ImageService_GetImagesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetImagesStream not implemented")
}
func (UnimplementedImageServiceServer) LoadImageStream(ImageService_LoadImageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LoadImageStream not implemented")
}
func (UnimplementedImageServiceServer) GetImagesInfo(context.Context, *Empty) (*ImagesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImagesInfo not implemented")
}

// UnsafeImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServiceServer will
// result in compilation errors.
type UnsafeImageServiceServer interface {
	mustEmbedUnimplementedImageServiceServer()
}

func RegisterImageServiceServer(s grpc.ServiceRegistrar, srv ImageServiceServer) {
	s.RegisterService(&ImageService_ServiceDesc, srv)
}

func _ImageService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tgf.ImageService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_LoadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).LoadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tgf.ImageService/LoadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).LoadImage(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_GetImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GetImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tgf.ImageService/GetImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GetImages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_GetImagesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceServer).GetImagesStream(m, &imageServiceGetImagesStreamServer{stream})
}

type ImageService_GetImagesStreamServer interface {
	Send(*Images) error
	grpc.ServerStream
}

type imageServiceGetImagesStreamServer struct {
	grpc.ServerStream
}

func (x *imageServiceGetImagesStreamServer) Send(m *Images) error {
	return x.ServerStream.SendMsg(m)
}

func _ImageService_LoadImageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageServiceServer).LoadImageStream(&imageServiceLoadImageStreamServer{stream})
}

type ImageService_LoadImageStreamServer interface {
	SendAndClose(*Empty) error
	Recv() (*ImageRequest, error)
	grpc.ServerStream
}

type imageServiceLoadImageStreamServer struct {
	grpc.ServerStream
}

func (x *imageServiceLoadImageStreamServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageServiceLoadImageStreamServer) Recv() (*ImageRequest, error) {
	m := new(ImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImageService_GetImagesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GetImagesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tgf.ImageService/GetImagesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GetImagesInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageService_ServiceDesc is the grpc.ServiceDesc for ImageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tgf.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ImageService_SayHello_Handler,
		},
		{
			MethodName: "LoadImage",
			Handler:    _ImageService_LoadImage_Handler,
		},
		{
			MethodName: "GetImages",
			Handler:    _ImageService_GetImages_Handler,
		},
		{
			MethodName: "GetImagesInfo",
			Handler:    _ImageService_GetImagesInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetImagesStream",
			Handler:       _ImageService_GetImagesStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LoadImageStream",
			Handler:       _ImageService_LoadImageStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "image_service.proto",
}
